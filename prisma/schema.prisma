// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) @db.Uuid
  email          String?         @unique
  phone          String?         @unique
  password       String
  role           Role            @default(USER)
  name           String?
  changeRequests ChangeRequest[] @relation("ChangeRequester")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

model Person {
  id         String          @id @default(uuid()) @db.Uuid
  firstName  String
  fullName   String
  gender     Gender
  birthDate  DateTime?
  deathDate  DateTime?
  phone      String?
  
  family     Family    @relation("FamilyMembers", fields: [familyId], references: [id])
  familyId   String @db.Uuid

  fatherId String? @db.Uuid
  motherId String? @db.Uuid

  father Person? @relation("FatherRelation", fields: [fatherId], references: [id])
  mother Person? @relation("MotherRelation", fields: [motherId], references: [id])

  fatherChildren Person[] @relation("FatherRelation")
  motherChildren Person[] @relation("MotherRelation")

  maleSpouses    SpouseRelationship[] @relation("Males")
  femaleSpouses      SpouseRelationship[] @relation("Females")

  rootOfFamily Family? @relation("RootPersonRelation")
}

model SpouseRelationship {
  id       String @id @default(uuid()) @db.Uuid
  male    Person @relation("Males", fields: [maleId], references: [id])
  maleId String @db.Uuid
  female   Person @relation("Females", fields: [femaleId], references: [id])
  femaleId String @db.Uuid

  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean   @default(true)

  @@unique([maleId, femaleId])
}

enum ChangeRequestAction {
  ADD
  DELETE
  UPDATE
}

enum ChangeRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ChangeRequestTargetModel {
  PERSON
  SPOUSERELATIONSHIP
}

model ChangeRequest {
  id             String              @id @default(uuid()) @db.Uuid
  displayId      Int                 @default(autoincrement())
  action         ChangeRequestAction
  status         ChangeRequestStatus @default(PENDING)
  targetModel    ChangeRequestTargetModel
  targetId       String? @db.Uuid
  data           Json?
  requester      User?               @relation("ChangeRequester", fields: [requesterId], references: [id])
  requesterId    String? @db.Uuid
  requesterName  String?
  requesterPhone String?
  createdAt      DateTime            @default(now())
}

model Family {
  id           String     @id @default(uuid()) @db.Uuid
  name         String
  rootPerson   Person?    @relation("RootPersonRelation", fields: [rootPersonId], references: [id])
  rootPersonId String?    @db.Uuid       @unique
  members      Person[]   @relation("FamilyMembers")
}